set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} "../cmake")
message(STATUS Looking\ for\ Cairo\ using\ FindCairo.cmake\ in:)
message(STATUS \t${CMAKE_MODULE_PATH})

find_package(Cairo REQUIRED)

if(CAIRO_FOUND)
	message(STATUS Cairo\ Included\ dirs:)
	message(STATUS \t${CAIRO_INCLUDE_DIRS})
	message(STATUS Cairo\ Libraries:)
	message(STATUS \t${CAIRO_LIBRARIES})
endif()

add_library(slide-lib slide.cc color.cc cairo_wrapper.cc documents.cc base64.cc)
target_link_libraries(slide-lib)
target_link_libraries(slide-lib INTERFACE ${CAIRO_LIBRARIES})

add_library(slide-core INTERFACE)
target_include_directories(slide-core INTERFACE ${CMAKE_CURRENT_SOURCE_DIR} ${CAIRO_INCLUDE_DIRS})
target_link_libraries(slide-core INTERFACE slide-lib)

add_library(app app.cc color.cc)
target_include_directories(app INTERFACE ${CMAKE_CURRENT_SOURCE_DIR} ${CAIRO_INCLUDE_DIRS})
target_link_libraries(app PRIVATE webview slide-core)

add_library(webview INTERFACE)
target_include_directories(webview INTERFACE "${CMAKE_CURRENT_SOURCE_DIR}")
if(APPLE)
	message(STATUS Apple\ detected)
	target_compile_definitions(webview INTERFACE "-DWEBVIEW_COCOA=1")
	target_compile_options(webview INTERFACE "-x" "objective-c++")
	target_link_libraries(webview INTERFACE "-framework Cocoa" "-framework WebKit")
elseif(WIN32)
	message(STATUS Windows\ detected)
	target_compile_definitions(webview INTERFACE "-DWEBVIEW_WINAPI=1")
	target_link_libraries(webview INTERFACE ole32 comctl32 oleaut32 uuid)
else()
	message(STATUS Neither\ Apple\ nor\ Windows\ detected)
	target_compile_definitions(webview INTERFACE "-DWEBVIEW_GTK=1")
	find_package(PkgConfig REQUIRED)
	pkg_check_modules(GTK3 REQUIRED gtk+-3.0)
	pkg_check_modules(WEBKIT REQUIRED webkitgtk-3.0)
	target_include_directories(webview INTERFACE ${GTK3_INCLUDE_DIRS} ${WEBKIT_INCLUDE_DIRS} ${PROJECT_SOURCE_DIR})
	target_link_libraries(webview INTERFACE ${GTK3_LIBRARIES} ${WEBKIT_LIBRARIES})
endif()

add_library(json INTERFACE)
target_include_directories(json INTERFACE ${CMAKE_CURRENT_SOURCE_DIR} ${CAIRO_INCLUDE_DIRS})

if(WIN32)
	add_executable(slide WIN32 main.cc ${CMAKE_SOURCE_DIR}/res/main.rc)
elseif(APPLE)
	add_executable(slide main.cc ${CMAKE_SOURCE_DIR}/res/main.rc)
	set_source_files_properties(main.cc PROPERTIES COMPILE_FLAGS "-x objective-c++")
else()
	add_executable(slide main.cc ${CMAKE_SOURCE_DIR}/res/main.rc)
endif()
target_link_libraries(slide PRIVATE slide-core webview json app slide-lib)

if(APPLE)
	install(TARGETS slide RUNTIME DESTINATION "slide.app/Contents/MacOS")
	install(FILES ${CMAKE_SOURCE_DIR}/res/Info.plist DESTINATION "slide.app/Contents")
	install(FILES ${CMAKE_SOURCE_DIR}/res/slide.icns DESTINATION "slide.app/Contents/Resources")
elseif(WIN32)
	install(TARGETS slide RUNTIME DESTINATION .)
else()
	install(TARGETS slide RUNTIME DESTINATION bin)
	install(FILES ${CMAKE_SOURCE_DIR}/res/slide.desktop DESTINATION "/usr/share/applications")
	install(FILES ${CMAKE_SOURCE_DIR}/res/slide.png DESTINATION "/usr/share/icons")
endif()
